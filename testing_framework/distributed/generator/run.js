/**
 * run.js
 *
 * This script automates running experiments
 * It generates a list of instructions that should be executed by nodes on the network
 * It sends the textfile containing the list of instructions and the static IP address information to each node on the network
 * It starts the executor.js script on each node
 * After the simulation has run to completion, it retrieves all the log files generated by each node on the network
 * It then merges all of the logging files into one file
 * The key metric tools can then use this logging file to evaluate the quality of the spatial publish protocol
 * The options.json file is used to specify the arguments of each script
 * 
 * 
 * Usage:
 *
 *
 * Arguments:
 * 
 * 
 * Example:
 * 
 * 
 */

const fs = require('fs');
const { exec } = require('child_process');

// const instructionsFilePath = './files/instructions.js';
// const remoteScriptPath = '~/vast-library/testing_framework/distributed/generator/sayhe.js';
// const sshUser = 'pi';
// const staticIPs = JSON.parse(fs.readFileSync("./files/static.json"));

// function startClients() {
//     for (const alias in staticIPs) {
//         const ip = staticIPs.alias.static_IP_address;
//         const sshCommand = `ssh ${sshUser}@${ip} 'node ${remoteScriptPath} ${instructionsFilePath} ${alias}'`;
//         exec(sshCommand, (err, stdout, stderr) => {
//             if (err) {
//                 console.log("There was an error executing the command line arguments for " + alias);
//                 return;
//             }
//             if (stderr) {
//                 console.log("There was an error when executing the executor.js script for " + alias);
//                 return;
//             }
//             if (stdout) {
//                 console.log("Seems to be fine");
//             }

//         });
//     }
// }

const remoteScriptPath = '~/testing/test.js';
const sshUser = 'pi';

function startClients() {
    for (const alias in staticIPs) {
        const ip = staticIPs.alias.static_IP_address;
        const sshCommand = `ssh ${sshUser}@${ip} 'node ${remoteScriptPath}'`;
        exec(sshCommand, (err, stdout, stderr) => {
            if (err) {
                console.log("There was an error executing the command line arguments for " + alias);
                return;
            }
            if (stderr) {
                console.log("There was an error when executing the executor.js script for " + alias);
                return;
            }
            if (stdout) {
                console.log("Seems to be fine");
            }

        });
    }
}

